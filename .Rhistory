data(mtcars)
plot_ly(mtcars, x = wt, y = mpg, mode = "markers" )
head(mtcars)
plot_ly(mtcars, x = wt, y = mpg, mode = "markers" )
?plot_ly
plot_ly(mtcars, x = ~wt, y = ~mpg, mode = "markers" )
plot_ly(mtcars, x = ~wt, y = ~mpg, mode = "markers", color = as.factor(cyl) )
plot_ly(mtcars, x = ~wt, y = ~mpg, mode = "markers", color = as.factor(~cyl) )
plot_ly(mtcars, x = ~wt, y = ~mpg, mode = "markers", color = as.factor(mtcars$cyl))
https://plot.ly/r/reference/#scatter
plot_ly(mtcars, x = ~wt, y = ~mpg, mode = "markers", color = disp
)
plot_ly(mtcars, x = ~wt, y = ~mpg, mode = "markers", color = ~disp)
install.packages("leaflet")
library(leaflet)
my_map <- leaflet() %>% addTiles()
my_map
setwd("C9")
getwd()
library(leaflet)
knitr::opts_chunk$set(echo = TRUE)
library(leaflet)
filename <- "trafficCamTO.csv"
if (!file.exists(filename)){
fileURL <- "http://opendata.toronto.ca/transportation/tmc/rescucameraimages/Data/tmcearthcameras.csv"
download.file(fileURL, filename)
}
traffic <- read.csv(filename, stringsAsFactors = FALSE)
head(traffic)
head(traffic)
cam <- select(traffic, 1:3)
library(dplyr)
select(traffic, 1:3)
cam <- select (traffic, 1:3)
class(cam)
rename(cam, name = Camera.Number, lat = Latitude, lng = Longitude)
cam <- rename(cam, name = Camera.Number, lat = Latitude, lng = Longitude)
cam <- select (traffic, 1:3) %>% renamename = Camera.Number, lat = Latitude, lng = Longitude)
cam <- select (traffic, 1:3) %>% rename(name = Camera.Number, lat = Latitude, lng = Longitude)
head(cam)
head(select (traffic, 1:3) %>% rename(name = Camera.Number, lat = Latitude, lng = Longitude))
cam %>%
leaflet() %>%
addTiles() %>%
addMarkers(clusterOptions = markerClusterOptions())
cam %>%
leaflet() %>%
()
cam %>%
leaflet()
cam %>%
leaflet() %>%
addTiles()
cam %>%
leaflet() %>%
addTiles() %>%
addMarkers(clusterOptions = markerClusterOptions())
cam %>%
leaflet() %>%
addTiles() %>%
addMarkers(clusterOptions = markerClusterOptions(), popup = cam$name)
names(traffic)
getwd()
setwd("..")
getwd()
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
install.packages(caret)
install.packages("caret")
library(caret)
library(rattle)
install.packages("rattle")
library(rattle)
?rattle
?? rattle
??rattle library
library(rattle)
install.packages("rattle")
install.packages('RGtk2')
install.packages('GTK')
install.packages("rattle")
str(segmentationOriginal)
library(rpart)
trainSet <- segmentationOriginal[segmentationOriginal$Case =="Train",]
testSet <- segmentationOriginal[segmentationOriginal$Case =="Test",]
set.seed(125)
model_rpart <- train(Class~.,data=trainSet,method="rpart")
set.seed(125)
library(rpart)
library(ggplot2)
cartmodel <- train(Class ~ ., method = "rpart", data = training)
cartmodel$finalModel
rm(list=ls())
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
inTrain <- segmentationOriginal$Case=="Train"
training <- segmentationOriginal[inTrain, ]
testing <- segmentationOriginal[!inTrain, ]
set.seed(125)
library(rpart)
library(ggplot2)
cartmodel <- train(Class ~ ., method = "rpart", data = training)
cartmodel$finalModel
install.packages('e1071')
library(e1071)
cartmodel <- train(Class ~ ., method = "rpart", data = training)
cartmodel$finalModel
plot(cartmodel$finalModel, uniform=TRUE, main="Classification Tree")
text(cartmodel$finalModel, use.n = TRUE, all = TRUE, cex = 0.8)
fancyRpartPlot(cartmodel$finalModel)
library(rpart.plot)
rm(list=ls())
library(pgmm)
data(olive)
olive = olive[,-1]
install.packages(pgmm)
install.packages('pgmm')
library(pgmm)
data(olive)
olive = olive[,-1]
newdata = as.data.frame(t(colMeans(olive)))
modelfit <- train(Area ~ ., method = "rpart", data = olive)
predict(modelfit, newdata)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
install.pacakges('ElemStatLearn')
install.packages('ElemStatLearn')
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
modelfit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, method = "glm", family = "binomial", data = trainSA)
trainingpredict <- predict(modelfit, trainSA)
testingpredict <- predict(modelfit, testSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(trainSA$chd, trainingpredict)
missClass(testSA$chd, testingpredict)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
library(randomForest)
install.packages('randomforest')
install.packages('randomForest')
library(randomForest)
modelfit <- randomForest(y ~ ., data = vowel.train, importance = FALSE)
order(varImp(modelfit), decreasing = TRUE)
library(ggvis)
install.packages("ggvis")
library(ggvis)
library(googelvis)
library(googelVis)
install.packages("googleVis")
library(googleVis)
data("Exports")
M <- gvisMotionChart(Fruits, "Fruit", "Year", options=list(width=400, height=370))
plot(M)
show()
colSums
show
lm
mean
mean90
predict
dgamma
mean
getMethod()
getMethod
showMethods
?showMethods
?getMethods
install.packages("plotly")
devtools::install_github("ropensci/plotly")
install.packages("devtools")
library(devtools)
devtools::install_github("ropensci/plotly")
library(plotly)
data("mtcars")
mtcars
data("airquality")
airquality
quantmod
library(quantmod)
data(quantmod)
load.packages('quantmod')
mtcars
?plot_ly
plot_ly (mtcars, color = cyl)
plot_ly (mtcars, color = mtcars$cyl)
plotly()
plot_ly(mtcars, x = ~wt, y = ~mpg, type = "scatter",
color = ~factor(cyl), size = ~hp)
?mtcars
plot_ly(mtcars, x = ~wt, y = ~mpg, type = "scatter", color = ~factor(cyl))
plot_ly(mtcars, x = ~wt, y = ~mpg, type = "scatter", color = ~factor(cyl))
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
mod_rf <- train(y ~ ., data = vowel.train, method = "rf")
mod_gbm <- train(y ~ ., data = vowel.train, method = "gbm")
pred_rf <- predict(mod_rf, vowel.test)
pred_gbm <- predict(mod_gbm, vowel.test)
library(caret)
mod_rf <- train(y ~ ., data = vowel.train, method = "rf")
mod_gbm <- train(y ~ ., data = vowel.train, method = "gbm")
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
mod_rf <- train(y ~ ., data = vowel.train, method = "rf")
mod_gbm <- train(y ~ ., data = vowel.train, method = "gbm")
pred_rf <- predict(mod_rf, vowel.test)
pred_gbm <- predict(mod_gbm, vowel.test)
confusionMatrix(pred_rf, vowel.test$y)$overall
confusionMatrix(pred_rf, vowel.test$y)$overall[1]
confusionMatrix(pred_gbm, vowel.test$y)$overall[1]
head(vowel.test)
predDF <- data.frame(pred_rf, pred_gbm, y = vowel.test$y)
# Accuracy among the test set samples where the two methods agree
sum(pred_rf[predDF$pred_rf == predDF$pred_gbm] ==
predDF$y[predDF$pred_rf == predDF$pred_gbm]) /
sum(predDF$pred_rf == predDF$pred_gbm)
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
modRF2 <- train(diagnosis ~ ., data=training, method="rf") #, trControl=trainControl("cv"), number=3)
modBoost2 <- train(diagnosis ~ ., data=training, method="gbm", verbose=FALSE)
modLDA2 <- train(diagnosis ~ ., data=training, method="lda", verbose=FALSE)
predRF2 <- predict(modRF2, testing)
predBoost2 <- predict(modBoost2, testing)
predLDA2 <- predict(modLDA2, testing)
dataCombined <- data.frame(predRF2, predBoost2, predLDA2, diagnosis=testing$diagnosis)
modCombined <- train(diagnosis ~ ., data=dataCombined, method="rf", verbose=FALSE)
predRF2
predBoost2
modRF2
modBoost2
predCombined <- predict(modCombined, dataCombined)
cfmRF2 <- confusionMatrix(testing$diagnosis, predRF2)
cfmBoost2 <- confusionMatrix(testing$diagnosis, predBoost2)
cfmLDA2 <- confusionMatrix(testing$diagnosis, predLDA2)
cfmCombined <- confusionMatrix(testing$diagnosis, predCombined)
cfmRF2$overall["Accuracy"]
cfmBoost2$overall["Accuracy"]
cfmLDA2$overall["Accuracy"]
cfmCombined$overall["Accuracy"]
dataCombined
modCombined
predCombined
cfmCombined <- confusionMatrix(testing$diagnosis, predCombined)
cmfcombined
cfmCombined
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
modLasso <- train(CompressiveStrength ~ ., data=training, method="lasso")
plot.enet(modLasso$finalModel,  xvar="penalty", use.color=TRUE)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
modSvm <- svm(CompressiveStrength ~ ., data = training)
predSvm <- predict(modSvm, testing)
accSvm <- accuracy(predSvm, testing$CompressiveStrength)
data.frame(accSvm)["RMSE"]
library(e1071)
set.seed(325)
modSvm <- svm(CompressiveStrength ~ ., data = training)
predSvm <- predict(modSvm, testing)
accSvm <- accuracy(predSvm, testing$CompressiveStrength)
data.frame(accSvm)["RMSE"]
library(forecast)
?accuracy
??accuracy
install.packages('forecast', dependencies = TRUE)
library(forecast)
set.seed(325)
modSvm <- svm(CompressiveStrength ~ ., data = training)
predSvm <- predict(modSvm, testing)
accSvm <- accuracy(predSvm, testing$CompressiveStrength)
data.frame(accSvm)["RMSE"]
accSvm
library(caret)
library(rpart)
library(rpart.plot)
library(RColorBrewer)
library(rattle)
install.packages("rpart.plot")
install.packages("rattle")
install.packages("GTK")
install.packages("RGtk2")
install.packages("RGtk2")
install.packages("rattle", dependencies=TRUE)
quit
q()
modfit1 <- train(classe ~ .,method='rpart',data=training)
library(caret)
modfit1 <- train(classe ~ .,method='rpart',data=training)
getwd()
setwd('C8')
dir()
knitr::opts_chunk$set(echo = TRUE)
trainURL <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
testURL <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
trainFN <- "training.csv"
testFN <- "testing.csv"
if (!file.exists(trainFN)){download.file(trainURL, trainFN)}
if (!file.exists(testFN)){download.file(testURL, testFN)}
training <- read.csv(trainFN, na.strings=c("NA","#DIV/0!",""))
testing <- read.csv(testFN, na.strings=c("NA","#DIV/0!",""))
dim(training)
dim(testing)
head(testing)
set.seed(1111)
inTrain <- createDataPartition(y=training$classe, p = 0.60, list=FALSE)
trainingsubset <- training[inTrain,]
validatesubset <- training[-inTrain,]
modfit1 <- train(classe ~ .,method='rpart',data=trainingsubset)
fancyRpartPlot(modfit1$finalModel)
modfit2 <- train(classe ~ .,method='gbm',data=trainingsubset)
modfit3 <- train(classe ~ .,method='rfm',data=trainingsubset)
modfit3 <- train(classe ~ .,method='rf',data=trainingsubset)
class(training$classe)
names(training)
dim(training[ ,colSums(is.na(training)) == 0])
dim(testing[ ,colSums(is.na(testing)) == 0])
dim(training)
dim(testing)
training <- training[ ,colSums(is.na(training)) == 0]
training <- training[, -c(1:7)]
testing <- testing[ ,colSums(is.na(testing)) == 0]
testing <- testing[, -c(1:7)]
dim(training)
dim(testing)
modfit1 <- train(classe ~ .,method='rpart',data=trainingsubset)
set.seed(1111)
inTrain <- createDataPartition(y=training$classe, p = 0.60, list=FALSE)
trainingsubset <- training[inTrain,]
validatesubset <- training[-inTrain,]
modfit1 <- train(classe ~ .,method='rpart',data=trainingsubset)
fancyRpartPlot(modfit1$finalModel)
modfit1$finalModel
plot(modfit1$finalModel)
rpart.plot(modfit1)
library(rpart.plot)
rpart.plot(modfit1)
rpart.plot(modfit1$finalModel)
prediction <- predict(modFit1, validatesubset)
prediction <- predict(modfit1, validatesubset)
z=confusionMatrix(prediction,validatesubset$classe)
z$table
summary(trainingsubset$classe)
z$overall
knitr::opts_chunk$set(echo = TRUE)
library(caret)
library(rpart)
library(rpart.plot)
library(randomForest)
trainURL <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
testURL <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
trainFN <- "training.csv"
testFN <- "testing.csv"
if (!file.exists(trainFN)){download.file(trainURL, trainFN)}
if (!file.exists(testFN)){download.file(testURL, testFN)}
training <- read.csv(trainFN, na.strings=c("NA","#DIV/0!",""))
testing <- read.csv(testFN, na.strings=c("NA","#DIV/0!",""))
dim(training)
dim(testing)
training <- training[ ,colSums(is.na(training)) == 0]
training <- training[, -c(1:7)]
testing <- testing[ ,colSums(is.na(testing)) == 0]
testing <- testing[, -c(1:7)]
dim(training)
dim(testing)
class(training$classe)
set.seed(12345)
inTrain <- createDataPartition(y=training$classe, p = 0.60, list=FALSE)
trainingsubset <- training[inTrain,]
validatesubset <- training[-inTrain,]
knitr::opts_chunk$set(echo = TRUE)
library(caret)
library(rpart)
library(rpart.plot)
library(randomForest)
trainURL <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
testURL <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
trainFN <- "training.csv"
testFN <- "testing.csv"
if (!file.exists(trainFN)){download.file(trainURL, trainFN)}
if (!file.exists(testFN)){download.file(testURL, testFN)}
training <- read.csv(trainFN, na.strings=c("NA","#DIV/0!",""))
testing <- read.csv(testFN, na.strings=c("NA","#DIV/0!",""))
dim(training)
dim(testing)
training <- training[ ,colSums(is.na(training)) == 0]
training <- training[, -c(1:7)]
testing <- testing[ ,colSums(is.na(testing)) == 0]
testing <- testing[, -c(1:7)]
dim(training)
dim(testing)
class(training$classe)
set.seed(12345)
inTrain <- createDataPartition(y=training$classe, p = 0.60, list=FALSE)
trainingsubset <- training[inTrain,]
validatesubset <- training[-inTrain,]
set.seed(12345)
modfit1 <- train(classe ~ .,data=trainingsubset,method="rpart")
rpart.plot(modfit1$finalModel)
pred1 <- predict(modfit1, validatesubset)
cm1 <- confusionMatrix(pred1,validatesubset$classe)
cm1$table
cm1$overall
knitr::opts_chunk$set(echo = TRUE)
library(caret)
library(rpart)
library(rpart.plot)
library(randomForest)
trainURL <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
testURL <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
trainFN <- "training.csv"
testFN <- "testing.csv"
if (!file.exists(trainFN)){download.file(trainURL, trainFN)}
if (!file.exists(testFN)){download.file(testURL, testFN)}
training <- read.csv(trainFN, na.strings=c("NA","#DIV/0!",""))
testing <- read.csv(testFN, na.strings=c("NA","#DIV/0!",""))
dim(training)
dim(testing)
training <- training[ ,colSums(is.na(training)) == 0]
training <- training[, -c(1:7)]
testing <- testing[ ,colSums(is.na(testing)) == 0]
testing <- testing[, -c(1:7)]
dim(training)
dim(testing)
class(training$classe)
set.seed(12345)
inTrain <- createDataPartition(y=training$classe, p = 0.60, list=FALSE)
trainingsubset <- training[inTrain,]
validatesubset <- training[-inTrain,]
set.seed(12345)
modfit1 <- train(classe ~ .,data=trainingsubset,method="rpart")
rpart.plot(modfit1$finalModel)
pred1 <- predict(modfit1, validatesubset)
cm1 <- confusionMatrix(pred1,validatesubset$classe)
cm1$table
cm1$overall
knitr::opts_chunk$set(echo = TRUE)
library(caret)
library(rpart)
library(rpart.plot)
library(randomForest)
trainURL <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
testURL <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
trainFN <- "training.csv"
testFN <- "testing.csv"
if (!file.exists(trainFN)){download.file(trainURL, trainFN)}
if (!file.exists(testFN)){download.file(testURL, testFN)}
training <- read.csv(trainFN, na.strings=c("NA","#DIV/0!",""))
testing <- read.csv(testFN, na.strings=c("NA","#DIV/0!",""))
dim(training)
dim(testing)
training <- training[ ,colSums(is.na(training)) == 0]
training <- training[, -c(1:7)]
testing <- testing[ ,colSums(is.na(testing)) == 0]
testing <- testing[, -c(1:7)]
dim(training)
dim(testing)
class(training$classe)
set.seed(12345)
inTrain <- createDataPartition(y=training$classe, p = 0.60, list=FALSE)
trainingsubset <- training[inTrain,]
validatesubset <- training[-inTrain,]
set.seed(12345)
modfit1 <- train(classe ~ .,data=trainingsubset,method="rpart")
rpart.plot(modfit1$finalModel)
pred1 <- predict(modfit1, validatesubset)
cm1 <- confusionMatrix(pred1,validatesubset$classe)
cm1$table
cm1$overall
set.seed(12345)
modfit2 <- train(classe ~ .,data=trainingsubset,method="rf",prox=TRUE)
modfit2 <- train(classe ~ .,data=trainingsubset,method="rf",prox=TRUE)
